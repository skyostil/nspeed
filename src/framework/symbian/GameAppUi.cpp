/*
* ============================================================================
*  Name     : CGameAppUi from GameAppUi.cpp
*  Part of  : Game
*  Created  : 31.1.2004 by Sami Kyöstilä
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Version  :
*  Copyright: Sami Kyöstilä
* ============================================================================
*/

// INCLUDE FILES
#include "GameAppUi.h"
#include "GameContainer.h" 
#include "GameEng.h"
#include <Game.rsg>
#include "game.hrh"

#include <avkon.hrh>
#include <hal.h>

// ================= MEMBER FUNCTIONS =======================
//
// ----------------------------------------------------------
// CGameAppUi::ConstructL()
// ?implementation_description
// ----------------------------------------------------------
//
void CGameAppUi::ConstructL()
{
    BaseConstructL();

	TInt period;
	User::LeaveIfError(HAL::Get(HALData::ESystemTickPeriod, period));
	iTimerFreq = 1000000 / period;

	iEngine = Game::CreateEngine(this);

	iAppContainer = new (ELeave) CGameContainer(iEngine);
	iAppContainer->SetMopParent(this);
	iAppContainer->ConstructL();
	AddToStackL(iAppContainer);

	iAppContainer->StartDrawingL();
}

// ----------------------------------------------------
// CGameAppUi::~CGameAppUi()
// Destructor
// Frees reserved resources
// ----------------------------------------------------
//
CGameAppUi::~CGameAppUi()
{
	if (iAppContainer)
	{
		RemoveFromStack( iAppContainer );
		delete iAppContainer;
	}

	delete iEngine;
 }

// ------------------------------------------------------------------------------
// CGameAppUi::::DynInitMenuPaneL(TInt aResourceId,CEikMenuPane* aMenuPane)
//  This function is called by the EIKON framework just before it displays
//  a menu pane. Its default implementation is empty, and by overriding it,
//  the application can set the state of menu items dynamically according
//  to the state of application data.
// ------------------------------------------------------------------------------
//
void CGameAppUi::DynInitMenuPaneL(
    TInt /*aResourceId*/,CEikMenuPane* /*aMenuPane*/)
{
}

TKeyResponse CGameAppUi::HandleKeyEventL(
    const TKeyEvent& aKeyEvent,TEventCode aType)
{
	Game::Event event;

    if(!iAppContainer->iGameEng->Drawing())
	{
		if (aType == EEventKeyDown)
		{
			iAppContainer->StartDrawingL();
			return EKeyWasConsumed;
		}
		return EKeyWasNotConsumed;
	}

	switch(aType)
	{
	case EEventKeyDown:
		event.type = Game::Event::KeyPressEvent;
	break;
	case EEventKeyUp:
		event.type = Game::Event::KeyReleaseEvent;
	break;
	case EEventKey:
		event.type = Game::Event::KeyEvent;
	break;
	}

	event.key.code = aKeyEvent.iScanCode;
	iEngine->handleEvent(&event);

    return EKeyWasConsumed;
}

void CGameAppUi::HandleCommandL(TInt aCommand)
{
	switch ( aCommand )
	{
	case EEikCmdExit:
	{
		Game::Event event(Game::Event::ExitEvent);
		iEngine->handleEvent(&event);
		Exit();
		break;
	}
    default:
	break;      
    }
}

void CGameAppUi::exit()
{
	Exit();
}

unsigned int CGameAppUi::getTickCount()
{
	return User::TickCount();
}

unsigned int CGameAppUi::getTicksPerSecond()
{
	return iTimerFreq;
}


